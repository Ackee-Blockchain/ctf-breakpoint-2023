// The exploit-1 program is a simple game, where a player can fight against monsters.
// Each new player starts with 100% health, 100 mana points and 0 experience points.
// After a fight, a player looses 40% health and gains 5 experience points.
// A player can heal another player using his mana. 1 mana point = 1% health.
// A dead player (health = 0 %) cannot be healed and cannot fight or heal.

// TASK: Add your code at the indicated place bellow and finish the game!
//       Try to kill at least 8 monsters with only 2 players and gain over 70 experience points.
//    -> Verify if you were successful by runnig `anchor run exploit1` from the terminal.

import * as anchor from "@coral-xyz/anchor";
import {
  PublicKey,
  Keypair,
  SystemProgram,
} from "@solana/web3.js";
import { assert } from "chai";
import { Exploit1 } from "../../target/types/exploit_1";

describe("Exploit 1", async () => {
  let exploitSuccessful = false;


  let provider = anchor.AnchorProvider.local("http://127.0.0.1:8899");
  anchor.setProvider(provider);

  const program = anchor.workspace.Exploit1 as anchor.Program<Exploit1>;
  const user1 = Keypair.generate();
  const user2 = Keypair.generate();
  const [player1_account] = PublicKey.findProgramAddressSync([Buffer.from("PLAYER"), user1.publicKey.toBuffer()], program.programId);
  const [player2_account] = PublicKey.findProgramAddressSync([Buffer.from("PLAYER"), user2.publicKey.toBuffer()], program.programId);

  before("Fund the users!", async () => {
    await airdrop(provider.connection, user1.publicKey);
    await airdrop(provider.connection, user2.publicKey);
  });

  it("Setup players!", async () => {
    await program.methods.initPlayer().accounts({ user: user1.publicKey, playerAccount: player1_account, systemProgram: SystemProgram.programId }).signers([user1]).rpc({ commitment: "confirmed" });
    await program.methods.initPlayer().accounts({ user: user2.publicKey, playerAccount: player2_account, systemProgram: SystemProgram.programId }).signers([user2]).rpc({ commitment: "confirmed" });
  });

  it("Player2 fights 3 times, player1 heals player2 2 times!", async () => {
    console.log({
      "player_1": await program.account.player.fetch(player1_account, "confirmed"),
      "player_2": await program.account.player.fetch(player2_account, "confirmed")
    })

    await program.methods.fightMonster().accounts({ user: user2.publicKey, playerAccount: player2_account, }).signers([user2]).rpc({ commitment: "confirmed" });
    await program.methods.healCompanion().accounts({ user: user1.publicKey, healer: player1_account, injuredPlayer: player2_account }).signers([user1]).rpc({ commitment: "confirmed" });
    await program.methods.fightMonster().accounts({ user: user2.publicKey, playerAccount: player2_account, }).signers([user2]).rpc({ commitment: "confirmed" });
    await program.methods.healCompanion().accounts({ user: user1.publicKey, healer: player1_account, injuredPlayer: player2_account }).signers([user1]).rpc({ commitment: "confirmed" });
    await program.methods.fightMonster().accounts({ user: user2.publicKey, playerAccount: player2_account, }).signers([user2]).rpc({ commitment: "confirmed" });

  });



  it("Continue the game!", async () => {

    // You start with the following state:
    //   player_1: { mana: 20, health: 100, experience: 10, monstersKilled: 0 },
    //   player_2: { mana: 100, health: 60, experience: 15, monstersKilled: 3 }
    console.log({
      "player_1": await program.account.player.fetch(player1_account, "confirmed"),
      "player_2": await program.account.player.fetch(player2_account, "confirmed")
    })

    // x x x x x x x x x x x x x x x x x x x x x
    // | | | | | | | | | | | | | | | | | | | | |
    //           ADD YOUR CODE BELOW
    // | | | | | | | | | | | | | | | | | | | | |
    // v v v v v v v v v v v v v v v v v v v v v




    // ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^
    // | | | | | | | | | | | | | | | | | | | | |
    //           ADD YOUR CODE ABOVE
    // | | | | | | | | | | | | | | | | | | | | |
    // x x x x x x x x x x x x x x x x x x x x x
  });



  it("Exploit evaluation", async () => {
    exploitSuccessful = false;

    let player1 = await program.account.player.fetch(player1_account, "confirmed");
    let player2 = await program.account.player.fetch(player2_account, "confirmed");

    if (player1.monstersKilled + player2.monstersKilled < 8) {
      assert.fail("You did not kill 8 monsters!");
    }

    if (player1.experience + player2.experience < 70) {
      assert.fail("You did not gain at least 70 experience points!");
    }

    exploitSuccessful = true;

  });

  after("Evaluation", async () => {
    if (exploitSuccessful) {
      console.log('\n\n\x1b[32m', 'CONGRATULATIONS!!! You tricked the game!', '\x1b[0m')
    }
    else {
      console.log('\n\n\x1b[31m', 'You did not suceed to exploit the program!', '\x1b[0m')
    }

  });
});


async function airdrop(connection: any, address: any, amount = 1000000000) {
  await connection.confirmTransaction(await connection.requestAirdrop(address, amount), "confirmed");
}

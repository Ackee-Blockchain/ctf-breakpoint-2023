// This program is a simple game, where a player can fight against monsters.
// Each new player starts with 100% health, 100 mana points and 0 experience points.
// After a fight, a player looses 40% health and gains 5 experience points.
// A player can heal another player using his mana. 1 mana point = 1% health.
// A dead player (health = 0 %) cannot be healed and cannot fight or heal.

// TASK: Modify the ./expoit-pocs/exploit-1/exploit-1.ts file and finish the game!
//       Try to kill at least 8 monsters with only 2 players and gain over 70 experience points.
//    -> Verify if you were successful by runnig `anchor run exploit0` from the terminal.

use anchor_lang::prelude::*;

declare_id!("8aY3h1nPbkNAPg8YLgVEpfbeknTFbJNjkScL2Xcrq524");
pub const FIGHT_EXPERIENCE: u8 = 5;
pub const FIGHT_INJURY: u8 = 40;
pub const HEAL_EXPERIENCE: u8 = 5;

#[program]
pub mod exploit_1 {
    use super::*;

    // initializes a new player
    pub fn init_player(ctx: Context<InitPlayer>) -> Result<()> {
        let player_account = &mut ctx.accounts.player_account;
        player_account.health = 100;
        player_account.experience = 0;
        player_account.mana = 100;
        player_account.monsters_killed = 0;
        Ok(())
    }

    // fights a monster and reduces player's health, increases experience if not dead
    // reduces health
    pub fn fight_monster(ctx: Context<FightMonster>) -> Result<()> {
        let player_account = &mut ctx.accounts.player_account;

        require!(player_account.health > 0, GameError::ZombiesNotAllowed);

        // reduce health after the fight
        player_account.health = player_account.health.saturating_sub(FIGHT_INJURY);
        player_account.experience = player_account.experience.saturating_add(FIGHT_EXPERIENCE);
        player_account.monsters_killed = player_account.monsters_killed.saturating_add(1);

        Ok(())
    }

    // heal another player using your mana and gain experience
    pub fn heal_companion(ctx: Context<HealCompanion>) -> Result<()> {
        let healer = &mut ctx.accounts.healer;
        let injured_player = &mut ctx.accounts.injured_player;

        require!(injured_player.health > 0, GameError::ZombiesNotAllowed);
        require!(healer.health > 0, GameError::ZombiesNotAllowed);

        let to_heal = 100 - injured_player.health;

        require!(healer.mana >= to_heal, GameError::NotEnoughMana);

        injured_player.health = 100;
        healer.mana -= to_heal;
        healer.experience = healer.experience.saturating_add(HEAL_EXPERIENCE);

        Ok(())
    }
}

#[derive(Accounts)]
pub struct InitPlayer<'info> {
    #[account(mut)]
    pub user: Signer<'info>,

    #[account(
        init,
        payer = user,
        space = 8 + 4,
        seeds = [b"PLAYER", user.key().as_ref()],
        bump
    )]
    pub player_account: Account<'info, Player>,

    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct FightMonster<'info> {
    #[account(mut)]
    pub user: Signer<'info>,

    #[account(
        mut,
        seeds = [b"PLAYER", user.key().as_ref()],
        bump
    )]
    pub player_account: Account<'info, Player>,
}

#[derive(Accounts)]
pub struct HealCompanion<'info> {
    #[account(mut)]
    pub user: Signer<'info>,

    #[account(mut)]
    pub injured_player: Account<'info, Player>,

    #[account(
        mut,
        seeds = [b"PLAYER", user.key().as_ref()],
        bump
    )]
    pub healer: Account<'info, Player>,
}

#[account]
pub struct Player {
    pub mana: u8,
    pub health: u8,
    pub experience: u8,
    pub monsters_killed: u8,
}

#[error_code]
pub enum GameError {
    ZombiesNotAllowed,
    NotEnoughMana,
}
